trigger:
- master
- feature/*

pool: default

variables: 
- group: "secrets-stage"

stages:
# Continuous Integration Process
- stage: CI
  jobs:
  - job: BuildAndPushDocker
    workspace: 
      clean: all
    steps:
    - script: |
        if ! command -v docker; then
          sudo apt-get remove docker docker-engine docker.io containerd runc
          sudo apt-get update
          sudo apt-get install \
          ca-certificates \
          curl \
          gnupg \
          lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io
          echo $(docker -v)
        fi
      displayName: install_Docker
    # - task: DockerInstaller@0
    #   inputs:
    #     dockerVersion: '17.09.0-ce'

    - script: |
        if docker images shaym95/bootcamp -q 
        docker rmi $(docker images shaym95/bootcamp -q)
      displayName: remove old and unused Docker images

    - task: Docker@2
      displayName: Build an image
      inputs:
        repository: shaym95/bootcamp
        command: build
        Dockerfile: Dockerfile
    - task: Docker@2
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      displayName: Push image
      inputs:
        repository: shaym95/bootcamp
        command: push
        tags: |
          test1
    # - task: Docker@2
    #   inputs:
    #     command: 'buildAndPush'
    #     Dockerfile: '.Dockerfile'

# Continuous Deployment Process for Staging Environment
- stage: DeployToStaging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: staging
    displayName: Deploy to Staging
    environment: 'stg.stageansibleVM'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |  
              cd ~/
              echo "
              PORT=8080
              HOST=0.0.0.0
              PGHOST=$(pghost)
              PGUSERNAME=$(pg_username)
              PGDATABASE=postgres
              PGPASSWORD=$(pg_password)
              PGPORT=5432
              HOST_URL=http://$(LB_ip):8080
              COOKIE_ENCRYPT_PWD=superAwesomePasswordStringThatIsAtLeast32CharactersLong!
              NODE_ENV=development
              OKTA_ORG_URL=$(okta_url)
              OKTA_CLIENT_ID=$(okta_client_id)
              OKTA_CLIENT_SECRET=$(okta_client_secret)
              "> .env
            displayName: add .env file
          
# Continuous Delivery Process for Production Environment
# - stage: DeployToProduction
#   condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
#   jobs:
#   - deployment: production
#     displayName: Deploy to Production
#     environment:
#       name: <<YOUR ENVIRONMENT NAME>>
#       resourceType: VirtualMachine
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - <<YOUR TASKS>>
